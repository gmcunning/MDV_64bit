/**********************************************************************
 * TDRP params for RadarMapper
 **********************************************************************/

//======================================================================
//
// Program name: RadarMapper.
//
// RadarMapper transform the radar data in dbz to VIP levels. Then the 
//   VIP points are binned by level. The ouptut is percentage of points at 
//   VIP level inside a quadrangle of the RUC2 grid. The datastream is MDV 
//   files.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING PARAMETERS.
//
// Parameters controlling debug outputs.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// debug flag.
// Debug flag.
// Type: boolean
//

debug = TRUE;

//======================================================================
//
// PROCESS CONTROL PARAMETERS.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "cip";

///////////// runMode /////////////////////////////////
//
// Process running mode.
// Can be either ARCHIVE, REALTIME or FILELIST.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     FILELIST
//

runMode = ARCHIVE;

//======================================================================
//
// PROCESS I/O PARAMETERS.
//
// Parameters describing the input and output locations.
//
//======================================================================
 
///////////// inputUrl ////////////////////////////////
//
// Input URL.
// URL to use for input data.
// Type: string
//

inputUrl = "mdv/radar/convert";

///////////// inputMaxValidAge ////////////////////////
//
// maximum age of valid satellite data.
// The units are seconds.
// Type: int
//

inputMaxValidAge = 3600;

///////////// outputUrl ///////////////////////////////
//
// Output URL.
// URL to use for storing results.
// Type: string
//

outputUrl = "mdv/radar/mapper";

///////////// debugUrl ////////////////////////////////
//
// Debugging URL.
// URL to use for storing debugging results.
// Type: string
//

debugUrl = "mdv/radar/mapper_debug";

//======================================================================
//
// OUTPUT PROJECTION PARAMETERS.
//
//======================================================================
 
///////////// outputProjection ////////////////////////
//
// This is the user defined projection.
// userProjection is the output projection definition. The statellite 
//   and model input grid are remapped by userProjection as they are read. 
//   The choice of projections are PROJ_LATLON, PROJ_LAMBERT_CONF and 
//   PROJ_FLAT. PROJ_LATLON is a latitude/longitude projection, and if it 
//   is chosen the remaining parameters can be ignored. PROJ_FLAT is a 
//   flat projection, and if it is chosen the parameters rotation, 
//   origin_lat, origin_lon must be set. PROJ_LAMBERT_CONF is a Lambert 
//   conformal projection, and if it is chosen the parameters origin_lat, 
//   origin_lon, ref_lat_1 and ref_lat_2 must be set.
//
// Type: struct
//   typedef struct {
//      projection_t type;
//        Options:
//          PROJ_LATLON
//          PROJ_LAMBERT_CONF
//          PROJ_FLAT
//      double rotation;
//      double origin_lat;
//      double origin_lon;
//      double ref_lat_1;
//      double ref_lat_2;
//   }
//
//

outputProjection = {
    type = PROJ_LAMBERT_CONF,
    rotation = 0,
    origin_lat = 25,
    origin_lon = -95,
    ref_lat_1 = 25,
    ref_lat_2 = 25
};

///////////// outputGrid //////////////////////////////
//
// This is the user defined grid.
// userGrid is the output grid definition. The statellite and modelinput 
//   grid are remapped by userGrid as they are read.
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      double minx;
//      double miny;
//      double dx;
//      double dy;
//   }
//
//

outputGrid = {
    nx = 451,
    ny = 337,
    minx = -3332.14,
    miny = -588.89,
    dx = 13.545,
    dy = 13.545
};

//======================================================================
//
// ALGORITHM PARAMETERS.
//
//======================================================================
 
///////////// dbzFieldName ////////////////////////////
//
// radar dbz field name.
//
// 
//
//
// Type: string
//

dbzFieldName = "LCREF";

///////////// percentiles /////////////////////////////
//
// List of dBz percentiles to calulate.
// .
//
// Type: struct
//   typedef struct {
//      float value;
//      string short_name;
//      string long_name;
//   }
//
// 1D array - variable length.
//

percentiles = {
  {25.0, "DBZ_25_PCTL", "dBz 25th percentile" },
  {75.0, "DBZ_75_PCTL", "dBz 75th percentile"}
};

///////////// minDBzPoints ////////////////////////////
//
// minimum number of radar points in RUC quadrangle before dBz 
//   percentiles are calculated.
// .
// Minimum val: 1
// Type: int
//

minDBzPoints = 10;

