/**********************************************************************
 * TDRP params for PirepCsv2Spdb
 **********************************************************************/

//======================================================================
//
// Program PirepCsv2Spdb.
//
// This program reads pirep/airep data from ascii input and stores it in 
//   spdb data base. You can write the data out in decoded binary format 
//   or ascii format. For binary format, the struct pirep_t in 
//   include/rapformats/pirep.h will be used.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_VERBOSE;

///////////// instance ////////////////////////////////
//
// Process instance for procmap.
// This program uses this instance when registering with the process 
//   mapper.
// Type: string
//

instance = "cip";

///////////// mode ////////////////////////////////////
//
// Operational mode: (REALTIME, ARCHIVE, FILELIST, or STDIN).
// Realtime mode - waits for new data; archive mode runs on single file.
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//     FILELIST
//     STDIN
//

mode = FILELIST;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Path for directory to the input files.
// If possible, the file names should include date/time information. 
//   Acceptable options are: yyyymmdd/hhmmss*, *yyyymmdd?hhmmss*, 
//   *yyyymmddhhmmss*, *yyyymmddhhmm*, *yyyymddhh*, *yyyymmdd?hhmm, 
//   *yyyymmdd?hh, *yyyymmdd*.
// Type: string
//

input_dir = "csv/pirep";

///////////// latest_data_info_avail //////////////////
//
// Set to true if there is a latest_data_info file available in the 
//   input directory.
// REALTIME mode only.
// Type: boolean
//

latest_data_info_avail = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of rdata input files in realtime mode (secs).
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
// Minimum val: 1
// Type: int
//

max_realtime_valid_age = 3600;

//======================================================================
//
// DECODERS.
//
//======================================================================
 
//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// decoded_spdb_url ////////////////////////
//
// Spdb URL for decoded pirep data.
// The name of the URL which will be used as the destination for the 
//   SPDB data. If the dir does not start with / or ., it is relative to 
//   $DATA_DIR.  Leave an empty string to not write decoded PIREPs to 
//   SPDB.
// Type: string
//

decoded_spdb_url = "spdbp:://localhost::spdb/pirep";

///////////// ascii_spdb_url //////////////////////////
//
// Spdb URL for ASCII pirep data.
// The name of the URL which will be used as the destination for the 
//   ASCII SPDB data. If the dir does not start with / or ., it is 
//   relative to $DATA_DIR.  Leave an empty string to not write ASCII 
//   PIREPs to SPDB.
// Type: string
//

ascii_spdb_url = "";

///////////// output_compression //////////////////////
//
// Option to compress the chunks in the SPDB output.
// Set desired output compression. Compression should only be done for 
//   data in which the individual chunks are large.
//
// Type: enum
// Options:
//     COMPRESSION_NONE
//     COMPRESSION_GZIP
//     COMPRESSION_BZIP2
//

output_compression = COMPRESSION_NONE;

///////////// expire_secs /////////////////////////////
//
// Data expire period - seconds.
// In the SPDB data base, the data is set as expired after this period.
// Type: int
//

expire_secs = 21600;

///////////// field_names /////////////////////////////
//
// Names of CSV fields.
//
// Type: struct
//   typedef struct {
//      string time_n;
//      int time_i;
//      string lat_n;
//      int lat_i;
//      string lon_n;
//      int lon_i;
//      string altitude_n;
//      int altitude_i;
//      string raw_n;
//      int raw_i;
//      string aircraft_n;
//      int aircraft_i;
//      string type_n;
//      int type_i;
//      string ice_type_n;
//      int ice_type_i;
//      string ice_int_n;
//      int ice_int_i;
//      string ice_top_n;
//      int ice_top_i;
//      string ice_base_n;
//      int ice_base_i;
//      string ice_type2_n;
//      int ice_type2_i;
//      string ice_int2_n;
//      int ice_int2_i;
//      string ice_top2_n;
//      int ice_top2_i;
//      string ice_base2_n;
//      int ice_base2_i;
//      string turb_type_n;
//      int turb_type_i;
//      string turb_int_n;
//      int turb_int_i;
//      string turb_freq_n;
//      int turb_freq_i;
//      string turb_top_n;
//      int turb_top_i;
//      string turb_base_n;
//      int turb_base_i;
//      string turb_type2_n;
//      int turb_type2_i;
//      string turb_int2_n;
//      int turb_int2_i;
//      string turb_freq2_n;
//      int turb_freq2_i;
//      string turb_top2_n;
//      int turb_top2_i;
//      string turb_base2_n;
//      int turb_base2_i;
//      string sky_cover_n;
//      int sky_cover_i;
//      string cloud_top_n;
//      int cloud_top_i;
//      string cloud_base_n;
//      int cloud_base_i;
//      string sky_cover2_n;
//      int sky_cover2_i;
//      string cloud_top2_n;
//      int cloud_top2_i;
//      string cloud_base2_n;
//      int cloud_base2_i;
//      string temp_n;
//      int temp_i;
//      string wind_dir_n;
//      int wind_dir_i;
//      string wind_speed_n;
//      int wind_speed_i;
//      string visibility_n;
//      int visibility_i;
//   }
//
//

field_names = { "time", 0, "latitude(decimal deg)", 0, "longitude(decimal deg)", 0, "altitude/flightLevel(100 ft MSL)", 0, "rawObservation", 0, "aircraftType", 0, "reportType", 0, "icingType1", 0, "icingIntensity1", 0, "icingTop1(100 ft MSL)", 0, "icingBase1(100 ft MSL)", 0, "icingType2", 0, "icingIntensity2", 0, "icingTop2(100 ft MSL)", 0, "icingBase2(100 ft MSL)", 0, "turbulenceType1", 0, "turbulenceIntensity1", 0, "turbulenceFrequency1", 0, "turbulenceTop1(100 ft MSL)", 0, "turbulenceBase1(100 ft MSL)", 0, "turbulenceType2", 0, "turbulenceIntensity2", 0, "turbulenceFrequency2", 0, "turbulenceTop2(100 ft MSL)", 0, "turbulenceBase2(100 ft MSL)", 0, "cloudCoverage1(100 ft MSL)", 0, "cloudTop1(100 ft MSL)", 0, "cloudBase1(100 ft MSL)", 0, "cloudCoverage2(100 ft MSL)", 0, "cloudTop2(100 ft MSL)", 0, "cloudBase2(100 ft MSL)", 0, "airTemperature(C)", 0, "windDirection", 0, "windSpeed(kts)", 0, "visibility(mi)", 0 };

///////////// altitude_conversions ////////////////////
//
// The altitude fields are first multiplied by the scale and then the 
//   result is added to the bias.
// This is used for altitude, ice/turb/cloud top1/base1/top2/base2.
//
// Type: struct
//   typedef struct {
//      float scale;
//      float bias;
//   }
//
//

altitude_conversions = { 100, 0 };

///////////// temperature_conversion //////////////////
//
// The temperature field is first multiplied by the scale and the result 
//   is added to the bias.
//
// Type: struct
//   typedef struct {
//      float scale;
//      float bias;
//   }
//
//

temperature_conversion = { 1, 0 };

///////////// wind_speed_conversion ///////////////////
//
// The wind speed field is first multiplied by the scale and the result 
//   is added to the bias.
//
// Type: struct
//   typedef struct {
//      float scale;
//      float bias;
//   }
//
//

wind_speed_conversion = { 1, 0 };

///////////// visibility_conversion ///////////////////
//
// The visibility field is first multiplied by the scale and the result 
//   is added to the bias.
//
// Type: struct
//   typedef struct {
//      float scale;
//      float bias;
//   }
//
//

visibility_conversion = { 1, 0 };

///////////// assumptions /////////////////////////////
//
// Set to true to generate icing base and top from other data.
// Type: boolean
//

assumptions = TRUE;
