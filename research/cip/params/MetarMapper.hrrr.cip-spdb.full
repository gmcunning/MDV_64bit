/**********************************************************************
 * TDRP params for MetarMapper
 **********************************************************************/

//======================================================================
//
// Program name: MetarMapper.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING PARAMETERS.
//
// Parameters controlling debug outputs.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with the appropriate level of 
//   detail. DEBUG_VERBOSE will dump intermediatedata sets.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_NORM;

//======================================================================
//
// PROCESS CONTROL PARAMETERS.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "cip-spdb";

//======================================================================
//
// PROCESS I/O PARAMETERS.
//
// Parameters describing the input and output locations.
//
//======================================================================
 
///////////// inputDir ////////////////////////////////
//
// Directory for the spdb input.
// only used in realtime mode when metar_data_type is SPDB_METAR.
// Type: string
//

inputDir = "/d1/cunning/data/64-bit_mdv/cip/spdb/metar";

///////////// metarStationLogging /////////////////////
//
// Whether to log the processing of the metar station data file.
// METSTA logging id.
// Type: boolean
//

metarStationLogging = FALSE;

///////////// gridPointLogging ////////////////////////
//
// Whether to log the CIP grid point objects.
// Used to debug problems associated with assigning Metar stations and 
//   observations to grid points.
// GRIDPT logging id.
// Type: boolean
//

gridPointLogging = FALSE;

///////////// metarIngestLogging //////////////////////
//
// Whether to log input Metar observations.
// METING logging id.
// Type: boolean
//

metarIngestLogging = FALSE;

///////////// rejectedMetarsLogging ///////////////////
//
// Whether to log rejected Metar observations.
// Metars are rejected because the correspondind station is notin the 
//   external list of valid stations or an entry is a duplicate(identical 
//   station name and time)
// REJMET logging id.
// Type: boolean
//

rejectedMetarsLogging = FALSE;

///////////// useStationList //////////////////////////
//
// Use station list file for lat/lon/alt information or not.
// If TRUE, read metarStationPath and use information from this file to 
//   determine latitude/longitude/altitude information
// If FALSE, rely on latitude/longitude/altitude information contained 
//   in the input data.
// Type: boolean
//

useStationList = FALSE;

///////////// metarStationPath ////////////////////////
//
// Metar station file path.
// Path to to file containing a list of valid metar stations.
// Type: string
//

metarStationPath = "./stations.list";

///////////// outputUrl ///////////////////////////////
//
// Output URL.
// URL to use for storing results.
// Type: string
//

outputUrl = "/d1/cunning/data/64-bit_mdv/cip/mdv/metar_mapper";

///////////// metar_data_type /////////////////////////
//
// Metar data format (Netcdf or Spdb).
// MetarMapper can ingest Netcdf or Spdb input data files.
//
// Type: enum
// Options:
//     NETCDF_METAR
//     SPDB_METAR
//

metar_data_type = SPDB_METAR;

///////////// mode ////////////////////////////////////
//
// Runtime mode - ARCHIVE or REALTIME.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

mode = ARCHIVE;

///////////// max_valid_age ///////////////////////////
//
// maximum age of valid input data.
// The units are seconds. Used only in SPDB realtime mode.
// Type: int
//

max_valid_age = 3600;

///////////// sleep_secs_for_realtime_mode ////////////
//
// time to sleep to wait for new data.
// The units are seconds.
// Type: int
//

sleep_secs_for_realtime_mode = 0;

///////////// triggerDir //////////////////////////////
//
// Trigger Dir.
// When new data arrives at this URL MetarMapper will run & produce 
//   output.  If left undefined, the inputDir is used as the trigger.
// Type: string
//

triggerDir = "";

//======================================================================
//
// OUTPUT PROJECTION PARAMETERS.
//
//======================================================================
 
///////////// outputProjection ////////////////////////
//
// This is the user defined projection.
// userProjection is the output projection definition. The statellite 
//   and model input grid are remapped by userProjection as they are read. 
//   The choice of projections are PROJ_LATLON, PROJ_LAMBERT_CONF and 
//   PROJ_FLAT. PROJ_LATLON is a latitude/longitude projection, and if it 
//   is chosen the remaining parameters can be ignored. PROJ_FLAT is a 
//   flat projection, and if it is chosen the parameters rotation, 
//   origin_lat, origin_lon must be set. PROJ_LAMBERT_CONF is a Lambert 
//   conformal projection, and if it is chosen the parameters origin_lat, 
//   origin_lon, ref_lat_1 and ref_lat_2 must be set.
//
// Type: struct
//   typedef struct {
//      projection_t type;
//        Options:
//          PROJ_LATLON
//          PROJ_LAMBERT_CONF
//          PROJ_FLAT
//      double rotation;
//      double origin_lat;
//      double origin_lon;
//      double ref_lat_1;
//      double ref_lat_2;
//   }
//
//

outputProjection = { PROJ_LAMBERT_CONF, 0, 38.5, -97.5, 38.5, 38.5 };

///////////// outputGrid //////////////////////////////
//
// This is the user defined grid.
// userGrid is the output grid definition. The satellite and modelinput 
//   grid are remapped by userGrid as they are read.
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      double minx;
//      double miny;
//      double dx;
//      double dy;
//   }
//
//
outputGrid = { 1799, 1059, -2697.515, -1587.305, 3.0, 3.0 };

//======================================================================
//
// ALGORITHM PARAMETERS.
//
//======================================================================
 
///////////// radiusOfInfluence ///////////////////////
//
// Metar station radius of influence (km).
// Radius in km.
// Type: float
//

radiusOfInfluence = 125;

///////////// radiusMultiplier ////////////////////////
//
// Used to determine maximum radius to look for metars.
// Multiplied by distance from closest metar.
// Type: float
//

radiusMultiplier = 1.2;

///////////// radiusOffset ////////////////////////////
//
// Used to determine maximum radius to look for metars.
// Added to distance from closest metar.
// Type: float
//

radiusOffset = 20;

///////////// lastMetarOnly ///////////////////////////
//
// Flag specifying whether all Metar observations reported fora specific 
//   station should be processed, or only the most recentobservation for 
//   this station.
// Last Observation Flag.
// Type: boolean
//

lastMetarOnly = FALSE;

///////////// minNumMetars ////////////////////////////
//
// minimum number of metar reports needed to produce results.
// The units are seconds.
// Minimum val: 1
// Type: int
//

minNumMetars = 800;

///////////// rejectedStations ////////////////////////
//
// List of rejected station IDs.
// If a station is not on this list, it is not stored.
// Type: string
// 1D array - variable length.
//

rejectedStations = { "FAKE", "K123", "K789" };

///////////// doConfidences ///////////////////////////
//
// Calculate confidences?.
// Type: boolean
//

doConfidences = TRUE;

///////////// CBHMatchingRange ////////////////////////
//
// Minimum difference for CBH values to be considered the same.
// Type: float
//

CBHMatchingRange = 1000;

///////////// interest_map_list ///////////////////////
//
// Interest map list.
// A string is used to define an interest map. The string contains three 
//   compontents, which are the name, dimensionality of the map, and the 
//   map definition. The name must be unique as it is used a key in a hash 
//   map. The dimensionality is an integer value [2,3]. The map definition 
//   is a set of x-y pairs delimited with ',' and '}'. An example string 
//   definition is: delta_theta_e_map, 2, {{1.0, 0.0},{4.0, 1.0}}.
// Type: string
// 1D array - variable length.
//

interest_map_list = { "CBH_TConf, 2, {{0.0, 1},  {7200, 0}}", "CBH_SConf, 2, {{0.0, 1}, {125, 0}}", "CBH_AConf, 2, {{0.0, 0}, {1, 0.33}, {2, 0.66}, {4, 1}}", "CC_TConf, 2, {{0.0, 1},  {7200, 0}}", "CC_SConf, 2, {{0.0, 1}, {125, 0}}", "CC_AConf, 2, {{0.0, 0}, {1, 0.33}, {2, 0.66}, {4, 1}}", "ZL_TConf, 2, {{0.0, 1},  {7200, 0}}", "ZL_SConf, 2, {{0.0, 1}, {125, 0}}", "ZL_AConf, 2, {{0.0, 0}, {1, 0.33}, {2, 0.66}, {4, 1}}", "ZR_TConf, 2, {{0.0, 1},  {7200, 0}}", "ZR_SConf, 2, {{0.0, 1}, {125, 0}}", "ZR_AConf, 2, {{0.0, 0}, {1, 0.33}, {2, 0.66}, {4, 1}}", "IP_TConf, 2, {{0.0, 1},  {7200, 0}}", "IP_SConf, 2, {{0.0, 1}, {125, 0}}", "IP_AConf, 2, {{0.0, 0}, {1, 0.33}, {2, 0.66}, {4, 1}}", "RN_TConf, 2, {{0.0, 1},  {7200, 0}}", "RN_SConf, 2, {{0.0, 1}, {125, 0}}", "RN_AConf, 2, {{0.0, 0}, {1, 0.33}, {2, 0.66}, {4, 1}}", "SN_TConf, 2, {{0.0, 1},  {7200, 0}}", "SN_SConf, 2, {{0.0, 1}, {125, 0}}", "SN_AConf, 2, {{0.0, 0}, {1, 0.33}, {2, 0.66}, {4, 1}}", "DZ_TConf, 2, {{0.0, 1},  {7200, 0}}", "DZ_SConf, 2, {{0.0, 1}, {125, 0}}", "DZ_AConf, 2, {{0.0, 0}, {1, 0.33}, {2, 0.66}, {4, 1}}", "TH_TConf, 2, {{0.0, 1},  {7200, 0}}", "TH_SConf, 2, {{0.0, 1}, {125, 0}}", "TH_AConf, 2, {{0.0, 0}, {1, 0.33}, {2, 0.66}, {4, 1}}" };

